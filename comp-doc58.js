(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{566:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/san/dist/san.spa.min.js\nvar san_spa_min = __webpack_require__(0);\nvar san_spa_min_default = /*#__PURE__*/__webpack_require__.n(san_spa_min);\n\n// CONCATENATED MODULE: ./src/transfer/README.md\n/* harmony default export */ var README = ({\n  template: `<section class="markdown"><h2 id="api">API</h2><h3 id="transfer">Transfer</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>dataSource</td><td>数据源，其中的数据将会被渲染到左边一栏中，<code>targetKeys</code> 中指定的除外。</td><td>TransferItem[]</td><td><code>[]</code></td></tr><tr><td>disabled</td><td>是否禁用</td><td>boolean</td><td><code>false</code></td></tr><tr><td>filterOption</td><td>接收 <code>inputValue</code> <code>option</code> 两个参数，当 <code>option</code> 符合筛选条件时，应返回 <code>true</code>，反之则返回 <code>false</code>。</td><td>(inputValue, option): boolean</td><td>-</td></tr><tr><td>footer</td><td>底部插槽</td><td>slot</td><td>-</td></tr><tr><td>listStyle</td><td>两个穿梭框的自定义样式</td><td>object</td><td>-</td></tr><tr><td>operations</td><td>操作文案集合，顺序从上至下</td><td>string[]</td><td><code>\\[&#39;&gt;&#39;, &#39;&lt;&#39;]</code></td></tr><tr><td>render</td><td>每行数据渲染插槽</td><td>slot</td><td>-</td></tr><tr><td>leftRenderList</td><td>左边栏整体渲染插槽</td><td>slot</td><td>-</td></tr><tr><td>rightRenderList</td><td>右边栏整体渲染插槽</td><td>slot</td><td>-</td></tr><tr><td>selectedKeys</td><td>设置哪些项应该被选中</td><td>string[]</td><td><code>\\[]</code></td></tr><tr><td>showSearch</td><td>是否显示搜索框</td><td>boolean</td><td><code>false</code></td></tr><tr><td>showSelectAll</td><td>是否显示全选勾选框</td><td>boolean</td><td><code>true</code></td></tr><tr><td>targetKeys</td><td>显示在右侧框数据的key集合</td><td>string[]</td><td><code>\\[]</code></td></tr><tr><td>titles</td><td>标题集合，顺序从左至右</td><td>string[]</td><td><code>\\[&#39;&#39;, &#39;&#39;]</code></td></tr><tr><td>on-change</td><td>选项在两栏之间转移时的回调函数</td><td>({targetKeys, direction, moveKeys}): void</td><td>-</td></tr><tr><td>on-scroll</td><td>选项列表滚动时的回调函数</td><td>({direction, event}): void</td><td>-</td></tr><tr><td>on-search</td><td>搜索框内容时改变时的回调函数</td><td>({direction: &#39;left&#39;|&#39;right&#39;, value: string}): void</td><td>-</td></tr><tr><td>on-selectChange</td><td>选中项发生改变时的回调函数</td><td>({sourceSelectedKeys, targetSelectedKeys}): void</td><td>-</td></tr></tbody></table><h3 id="leftrenderlist--rightrenderlist-props">leftRenderList &amp; rightRenderList Props</h3><p>Transfer支持leftRenderList和rightRenderList插槽来自定义渲染列表，在组件里面可以使用以下参数：</p><table><thead><tr><th>参数</th><th>说明</th><th>类型</th></tr></thead><tbody><tr><td>direction</td><td>渲染列表的方向</td><td>&#39;left&#39; | &#39;right&#39;</td></tr><tr><td>disabled</td><td>是否禁用列表</td><td>boolean</td></tr><tr><td>filteredItems</td><td>过滤后的数据</td><td>TransferItem[]</td></tr><tr><td>selectedKeys</td><td>选中的条目</td><td>string[]</td></tr></tbody></table></section>`\n});\n    if(false){ var moduleDefault, id, hotApi; }\n    \n// EXTERNAL MODULE: ./src/transfer/index.js + 4 modules\nvar transfer = __webpack_require__(119);\n\n// EXTERNAL MODULE: ./src/switch/index.js\nvar src_switch = __webpack_require__(96);\n\n// CONCATENATED MODULE: ./node_modules/hulk-san-loader!./node_modules/hulk-markdown-loader/utils/pickFence.js?url=/Users/mayihui/code/santd/src/transfer/docs/basic.md!./node_modules/hulk-markdown-loader/utils/_fakemd?mdurl=/Users/mayihui/code/santd/src/transfer/docs/basic.md&_t=1576497827836\nconst mockData = [];\n\nfor (let i = 0; i < 20; i++) {\n  mockData.push({\n    key: i.toString(),\n    title: `content${i + 1}`,\n    description: `description of content${i + 1}`,\n    disabled: i % 3 < 1\n  });\n}\n\nconst oriTargetKeys = mockData.filter(item => +item.key % 3 > 1).map(item => item.key);\n\n\n/* harmony default export */ var basic_md_t_1576497827836 = ({\n  initData() {\n    return {\n      disabled: false,\n      mockData: mockData,\n      targetKeys: oriTargetKeys,\n      selectedKeys: []\n    };\n  },\n\n  components: {\n    \'s-transfer\': transfer["a" /* default */],\n    \'s-switch\': src_switch["a" /* default */]\n  },\n\n  handleChange({\n    targetKeys,\n    direction,\n    moveKeys\n  }) {\n    this.data.set(\'targetKeys\', targetKeys);\n    console.log(\'targetKeys: \', targetKeys);\n    console.log(\'direction: \', direction);\n    console.log(\'moveKeys: \', moveKeys);\n  },\n\n  handleSearch(param) {\n    console.log(\'on-search\', param);\n  },\n\n  handleSelectChange({\n    sourceSelectedKeys,\n    targetSelectedKeys\n  }) {\n    this.data.set(\'selectedKeys\', [...sourceSelectedKeys, ...targetSelectedKeys]);\n    console.log(\'sourceSelectedKeys: \', sourceSelectedKeys);\n    console.log(\'targetSelectedKeys: \', targetSelectedKeys);\n  },\n\n  handleScroll({\n    direction,\n    e\n  }) {\n    console.log(\'direction: \', direction);\n    console.log(\'target: \', e.target);\n  },\n\n  handleDisable(disable) {\n    this.data.set(\'disabled\', disable);\n  },\n\n  template: `<div><s-transfer disabled="{{disabled}}" dataSource="{{mockData}}" targetKeys="{{targetKeys}}" titles="{{[\'Source\', \'Target\']}}" on-selectChange="handleSelectChange" on-change="handleChange" on-scroll="handleScroll" selectedKeys="{{selectedKeys}}"><span slot="render">{{item.title}}</span></s-transfer><s-switch checkedChildren="disabled" unCheckedChildren="disabled" checked="{{disabled}}" on-change="handleDisable" style="margin-top: 16px"></s-switch></div>`\n});\n// CONCATENATED MODULE: ./src/transfer/docs/basic.md\n\n/* harmony default export */ var basic = ({\n  initData() {\n    return {\n      isExpand: false,\n      code: `\n<pre><code class="language-html">&lt;template>\n    &lt;div>\n        &lt;s-transfer\n            disabled="{{disabled}}"\n            dataSource="{{mockData}}"\n            targetKeys="{{targetKeys}}"\n            titles="{{[\'Source\', \'Target\']}}"\n            on-selectChange="handleSelectChange"\n            on-change="handleChange"\n            on-scroll="handleScroll"\n            selectedKeys="{{selectedKeys}}"\n        >\n            &lt;span slot="render">{{item.title}}&lt;/span>\n        &lt;/s-transfer>\n        &lt;s-switch\n            checkedChildren="disabled"\n            unCheckedChildren="disabled"\n            checked="{{disabled}}"\n            on-change="handleDisable"\n            style="margin-top: 16px"\n        />\n    &lt;/div>\n&lt;/template>\n&lt;script>\n\nconst mockData = [];\nfor (let i = 0; i &lt; 20; i++) {\n    mockData.push({\n        key: i.toString(),\n        title: &#96;content&#36;&#123;i + 1}&#96;,\n        description: &#96;description of content&#36;&#123;i + 1}&#96;,\n        disabled: i % 3 &lt; 1\n    });\n}\n\nconst oriTargetKeys = mockData\n    .filter(item => +item.key % 3 > 1)\n    .map(item => item.key);\n\nimport transfer from \'santd/transfer\';\nimport Switch from \'santd/switch\';\nexport default {\n    initData() {\n        return {\n            disabled: false,\n            mockData: mockData,\n            targetKeys: oriTargetKeys,\n            selectedKeys: []\n        };\n    },\n    components: {\n        \'s-transfer\': transfer,\n        \'s-switch\': Switch\n    },\n    handleChange({targetKeys, direction, moveKeys}) {\n        this.data.set(\'targetKeys\', targetKeys);\n\n        console.log(\'targetKeys: \', targetKeys);\n        console.log(\'direction: \', direction);\n        console.log(\'moveKeys: \', moveKeys);\n    },\n    handleSearch(param) {\n        console.log(\'on-search\', param);\n    },\n    handleSelectChange({sourceSelectedKeys, targetSelectedKeys}) {\n        this.data.set(\'selectedKeys\', [...sourceSelectedKeys, ...targetSelectedKeys]);\n\n        console.log(\'sourceSelectedKeys: \', sourceSelectedKeys);\n        console.log(\'targetSelectedKeys: \', targetSelectedKeys);\n    },\n    handleScroll({direction, e}) {\n        console.log(\'direction: \', direction);\n        console.log(\'target: \', e.target);\n    },\n    handleDisable(disable) {\n        this.data.set(\'disabled\', disable);\n    }\n}\n&lt;/script></code></pre>`,\n      text: `\n<h4 id="基本用法">基本用法</h4>\n<p>最基本的用法，展示了 <code>dataSource</code>、<code>targetKeys</code>、每行的渲染函数 <code>render</code> 以及回调函数 <code>on-change</code> <code>on-selectChange</code> <code>on-scroll</code>的用法</p>`\n    };\n  },\n\n  toggleExpand() {\n    this.data.set(\'isExpand\', !this.data.get(\'isExpand\'));\n  },\n\n  components: {\n    \'code-preview\': basic_md_t_1576497827836\n  },\n  template: `<section class="code-box {{isExpand?\'expand\':\'\'}}" id="components-demo-1576497827836"><section class="code-box-demo"><code-preview></code-preview></section><section class="code-box-meta markdown">{{ text | raw}}<span class="code-expand-icon" on-click="toggleExpand"><img alt="expand code" src="https://gw.alipayobjects.com/zos/rmsportal/wSAkBuJFbdxsosKKpqyq.svg" class="{{isExpand?\'code-expand-icon-hide\':\'code-expand-icon-show\'}}"><img alt="expand code" src="https://gw.alipayobjects.com/zos/rmsportal/OpROPHYqWmrMDBFMZtKF.svg" class="{{isExpand?\'code-expand-icon-show\':\'code-expand-icon-hide\'}}"></span></section><section class="highlight-wrapper {{isExpand?\'highlight-wrapper-expand\':\'\'}}">{{ code | raw}}</section></section>`\n});\n    if(false){ var basic_moduleDefault, basic_id, basic_hotApi; }\n    \n// CONCATENATED MODULE: ./node_modules/hulk-san-loader!./node_modules/hulk-markdown-loader/utils/pickFence.js?url=/Users/mayihui/code/santd/src/transfer/docs/search.md!./node_modules/hulk-markdown-loader/utils/_fakemd?mdurl=/Users/mayihui/code/santd/src/transfer/docs/search.md&_t=1576497827821\n\n/* harmony default export */ var search_md_t_1576497827821 = ({\n  initData() {\n    return {\n      mockData: [],\n      targetKeys: [],\n      filterOption: (inputValue, option) => option.description.indexOf(inputValue) > -1\n    };\n  },\n\n  attached() {\n    this.getMock();\n  },\n\n  getMock() {\n    const targetKeys = [];\n    const mockData = [];\n\n    for (let i = 0; i < 20; i++) {\n      const data = {\n        key: i.toString(),\n        title: `content${i + 1}`,\n        description: `description of content${i + 1}`,\n        chosen: Math.random() * 2 > 1\n      };\n\n      if (data.chosen) {\n        targetKeys.push(data.key);\n      }\n\n      mockData.push(data);\n    }\n\n    this.data.set(\'mockData\', mockData);\n    this.data.set(\'targetKeys\', targetKeys);\n  },\n\n  components: {\n    \'s-transfer\': transfer["a" /* default */]\n  },\n\n  handleChange({\n    targetKeys\n  }) {\n    this.data.set(\'targetKeys\', targetKeys);\n  },\n\n  handleSearch({\n    direction,\n    value\n  }) {\n    console.log(\'search: \', direction, value);\n  },\n\n  template: `<div><s-transfer dataSource="{{mockData}}" targetKeys="{{targetKeys}}" filterOption="{{filterOption}}" showSearch="{{true}}" on-change="handleChange" on-search="handleSearch"></s-transfer></div>`\n});\n// CONCATENATED MODULE: ./src/transfer/docs/search.md\n\n/* harmony default export */ var search = ({\n  initData() {\n    return {\n      isExpand: false,\n      code: `\n<pre><code class="language-html">&lt;template>\n    &lt;div>\n        &lt;s-transfer\n            dataSource="{{mockData}}"\n            targetKeys="{{targetKeys}}"\n            filterOption="{{filterOption}}"\n            showSearch="{{true}}"\n            on-change="handleChange"\n            on-search="handleSearch"\n        />\n    &lt;/div>\n&lt;/template>\n&lt;script>\n\nimport transfer from \'santd/transfer\';\nexport default {\n    initData() {\n        return {\n            mockData: [],\n            targetKeys: [],\n            filterOption: (inputValue, option) => option.description.indexOf(inputValue) > -1\n        };\n    },\n    attached() {\n        this.getMock();\n    },\n    getMock() {\n        const targetKeys = [];\n        const mockData = [];\n        for (let i = 0; i &lt; 20; i++) {\n            const data = {\n                key: i.toString(),\n                title: &#96;content&#36;&#123;i + 1}&#96;,\n                description: &#96;description of content&#36;&#123;i + 1}&#96;,\n                chosen: Math.random() * 2 > 1\n            };\n            if (data.chosen) {\n                targetKeys.push(data.key);\n            }\n            mockData.push(data);\n        }\n        this.data.set(\'mockData\', mockData);\n        this.data.set(\'targetKeys\', targetKeys);\n    },\n    components: {\n        \'s-transfer\': transfer\n    },\n    handleChange({targetKeys}) {\n        this.data.set(\'targetKeys\', targetKeys);\n    },\n    handleSearch({direction, value}) {\n        console.log(\'search: \', direction, value);\n    }\n}\n&lt;/script></code></pre>`,\n      text: `\n<h4 id="带搜索框">带搜索框</h4>\n<p>带搜索框的穿梭框，可以自定义搜索函数。</p>`\n    };\n  },\n\n  toggleExpand() {\n    this.data.set(\'isExpand\', !this.data.get(\'isExpand\'));\n  },\n\n  components: {\n    \'code-preview\': search_md_t_1576497827821\n  },\n  template: `<section class="code-box {{isExpand?\'expand\':\'\'}}" id="components-demo-1576497827821"><section class="code-box-demo"><code-preview></code-preview></section><section class="code-box-meta markdown">{{ text | raw}}<span class="code-expand-icon" on-click="toggleExpand"><img alt="expand code" src="https://gw.alipayobjects.com/zos/rmsportal/wSAkBuJFbdxsosKKpqyq.svg" class="{{isExpand?\'code-expand-icon-hide\':\'code-expand-icon-show\'}}"><img alt="expand code" src="https://gw.alipayobjects.com/zos/rmsportal/OpROPHYqWmrMDBFMZtKF.svg" class="{{isExpand?\'code-expand-icon-show\':\'code-expand-icon-hide\'}}"></span></section><section class="highlight-wrapper {{isExpand?\'highlight-wrapper-expand\':\'\'}}">{{ code | raw}}</section></section>`\n});\n    if(false){ var search_moduleDefault, search_id, search_hotApi; }\n    \n// EXTERNAL MODULE: ./src/button/index.js + 2 modules\nvar src_button = __webpack_require__(10);\n\n// CONCATENATED MODULE: ./node_modules/hulk-san-loader!./node_modules/hulk-markdown-loader/utils/pickFence.js?url=/Users/mayihui/code/santd/src/transfer/docs/advance.md!./node_modules/hulk-markdown-loader/utils/_fakemd?mdurl=/Users/mayihui/code/santd/src/transfer/docs/advance.md&_t=1576497827794\n\n\n\n/* harmony default export */ var advance_md_t_1576497827794 = ({\n  initData() {\n    return {\n      mockData: [],\n      targetKeys: []\n    };\n  },\n\n  attached() {\n    this.getMock();\n  },\n\n  getMock() {\n    const targetKeys = [];\n    const mockData = [];\n\n    for (let i = 0; i < 20; i++) {\n      const data = {\n        key: i.toString(),\n        title: `content${i + 1}`,\n        description: `description of content${i + 1}`,\n        chosen: Math.random() * 2 > 1\n      };\n\n      if (data.chosen) {\n        targetKeys.push(data.key);\n      }\n\n      mockData.push(data);\n    }\n\n    this.data.set(\'mockData\', mockData);\n    this.data.set(\'targetKeys\', targetKeys);\n  },\n\n  components: {\n    \'s-transfer\': transfer["a" /* default */],\n    \'s-button\': src_button["a" /* default */]\n  },\n\n  handleChange({\n    targetKeys\n  }) {\n    this.data.set(\'targetKeys\', targetKeys);\n  },\n\n  template: `<div><s-transfer dataSource="{{mockData}}" targetKeys="{{targetKeys}}" on-change="handleChange" operations="{{[\'to Right\', \'to Left\']}}" listStyle="width: 250px; height: 300px;" showSearch="{{true}}"><span slot="footer"><s-button size="small" style="float: right; margin: 5px;" on-click="getMock">reload</s-button></span></s-transfer></div>`\n});\n// CONCATENATED MODULE: ./src/transfer/docs/advance.md\n\n/* harmony default export */ var advance = ({\n  initData() {\n    return {\n      isExpand: false,\n      code: `\n<pre><code class="language-html">&lt;template>\n    &lt;div>\n        &lt;s-transfer\n            dataSource="{{mockData}}"\n            targetKeys="{{targetKeys}}"\n            on-change="handleChange"\n            operations="{{[\'to Right\', \'to Left\']}}"\n            listStyle="width: 250px; height: 300px;"\n            showSearch="{{true}}"\n        >\n            &lt;span slot="footer">\n                &lt;s-button size="small" style="float: right; margin: 5px;" on-click="getMock">\n                    reload\n                &lt;/s-button>\n            &lt;/span>\n        &lt;/s-transfer>\n    &lt;/div>\n&lt;/template>\n&lt;script>\nimport Transfer from \'santd/transfer\';\nimport Button from \'santd/button\';\nimport san from \'san\';\n\nexport default {\n    initData() {\n        return {\n            mockData: [],\n            targetKeys: []\n        };\n    },\n    attached() {\n        this.getMock();\n    },\n    getMock() {\n        const targetKeys = [];\n        const mockData = [];\n        for (let i = 0; i &lt; 20; i++) {\n            const data = {\n                key: i.toString(),\n                title: &#96;content&#36;&#123;i + 1}&#96;,\n                description: &#96;description of content&#36;&#123;i + 1}&#96;,\n                chosen: Math.random() * 2 > 1\n            };\n            if (data.chosen) {\n                targetKeys.push(data.key);\n            }\n            mockData.push(data);\n        }\n        this.data.set(\'mockData\', mockData);\n        this.data.set(\'targetKeys\', targetKeys);\n    },\n    components: {\n        \'s-transfer\': Transfer,\n        \'s-button\': Button\n    },\n    handleChange({targetKeys}) {\n        this.data.set(\'targetKeys\', targetKeys);\n    }\n}\n&lt;/script></code></pre>`,\n      text: `\n<h4 id="高级用法">高级用法</h4>\n<p>穿梭框高级用法，可配置操作文案，可定制宽高，可对底部进行自定义渲染。</p>`\n    };\n  },\n\n  toggleExpand() {\n    this.data.set(\'isExpand\', !this.data.get(\'isExpand\'));\n  },\n\n  components: {\n    \'code-preview\': advance_md_t_1576497827794\n  },\n  template: `<section class="code-box {{isExpand?\'expand\':\'\'}}" id="components-demo-1576497827794"><section class="code-box-demo"><code-preview></code-preview></section><section class="code-box-meta markdown">{{ text | raw}}<span class="code-expand-icon" on-click="toggleExpand"><img alt="expand code" src="https://gw.alipayobjects.com/zos/rmsportal/wSAkBuJFbdxsosKKpqyq.svg" class="{{isExpand?\'code-expand-icon-hide\':\'code-expand-icon-show\'}}"><img alt="expand code" src="https://gw.alipayobjects.com/zos/rmsportal/OpROPHYqWmrMDBFMZtKF.svg" class="{{isExpand?\'code-expand-icon-show\':\'code-expand-icon-hide\'}}"></span></section><section class="highlight-wrapper {{isExpand?\'highlight-wrapper-expand\':\'\'}}">{{ code | raw}}</section></section>`\n});\n    if(false){ var advance_moduleDefault, advance_id, advance_hotApi; }\n    \n// CONCATENATED MODULE: ./node_modules/hulk-san-loader!./node_modules/hulk-markdown-loader/utils/pickFence.js?url=/Users/mayihui/code/santd/src/transfer/docs/render.md!./node_modules/hulk-markdown-loader/utils/_fakemd?mdurl=/Users/mayihui/code/santd/src/transfer/docs/render.md&_t=1576497827788\n\n\n/* harmony default export */ var render_md_t_1576497827788 = ({\n  initData() {\n    return {\n      mockData: [],\n      targetKeys: [],\n      listStyle: \'width: 250px; height: 300px;\'\n    };\n  },\n\n  attached() {\n    this.getMock();\n  },\n\n  getMock() {\n    const targetKeys = [];\n    const mockData = [];\n\n    for (let i = 0; i < 20; i++) {\n      const data = {\n        key: i.toString(),\n        title: `content${i + 1}`,\n        description: `description of content${i + 1}`,\n        chosen: Math.random() * 2 > 1\n      };\n\n      if (data.chosen) {\n        targetKeys.push(data.key);\n      }\n\n      mockData.push(data);\n    }\n\n    this.data.set(\'mockData\', mockData);\n    this.data.set(\'targetKeys\', targetKeys);\n  },\n\n  components: {\n    \'s-transfer\': transfer["a" /* default */]\n  },\n\n  handleChange({\n    targetKeys\n  }) {\n    this.data.set(\'targetKeys\', targetKeys);\n  },\n\n  template: `<div><s-transfer dataSource="{{mockData}}" listStyle="{{listStyle}}" targetKeys="{{targetKeys}}" on-change="handleChange"><span class="custom-item" slot="render">{{item.title}} - {{item.description}}</span></s-transfer></div>`\n});\n// CONCATENATED MODULE: ./src/transfer/docs/render.md\n\n/* harmony default export */ var render = ({\n  initData() {\n    return {\n      isExpand: false,\n      code: `\n<pre><code class="language-html">&lt;template>\n    &lt;div>\n        &lt;s-transfer\n            dataSource="{{mockData}}"\n            listStyle="{{listStyle}}"\n            targetKeys="{{targetKeys}}"\n            on-change="handleChange"\n        >\n            &lt;span class="custom-item" slot="render">{{item.title}} - {{item.description}}&lt;/span>\n        &lt;/s-transfer>\n    &lt;/div>\n&lt;/template>\n&lt;script>\nimport Transfer from \'santd/transfer\';\nimport san from \'san\';\n\nexport default {\n    initData() {\n        return {\n            mockData: [],\n            targetKeys: [],\n            listStyle: \'width: 250px; height: 300px;\',\n        };\n    },\n    attached() {\n        this.getMock();\n    },\n    getMock() {\n        const targetKeys = [];\n        const mockData = [];\n        for (let i = 0; i &lt; 20; i++) {\n            const data = {\n                key: i.toString(),\n                title: &#96;content&#36;&#123;i + 1}&#96;,\n                description: &#96;description of content&#36;&#123;i + 1}&#96;,\n                chosen: Math.random() * 2 > 1\n            };\n            if (data.chosen) {\n                targetKeys.push(data.key);\n            }\n            mockData.push(data);\n        }\n        this.data.set(\'mockData\', mockData);\n        this.data.set(\'targetKeys\', targetKeys);\n    },\n    components: {\n        \'s-transfer\': Transfer\n    },\n    handleChange({targetKeys}) {\n        this.data.set(\'targetKeys\', targetKeys);\n    }\n}\n&lt;/script></code></pre>`,\n      text: `\n<h4 id="自定义渲染行数据">自定义渲染行数据</h4>\n<p>自定义渲染每一个 Transfer Item，可用于渲染复杂数据。</p>`\n    };\n  },\n\n  toggleExpand() {\n    this.data.set(\'isExpand\', !this.data.get(\'isExpand\'));\n  },\n\n  components: {\n    \'code-preview\': render_md_t_1576497827788\n  },\n  template: `<section class="code-box {{isExpand?\'expand\':\'\'}}" id="components-demo-1576497827788"><section class="code-box-demo"><code-preview></code-preview></section><section class="code-box-meta markdown">{{ text | raw}}<span class="code-expand-icon" on-click="toggleExpand"><img alt="expand code" src="https://gw.alipayobjects.com/zos/rmsportal/wSAkBuJFbdxsosKKpqyq.svg" class="{{isExpand?\'code-expand-icon-hide\':\'code-expand-icon-show\'}}"><img alt="expand code" src="https://gw.alipayobjects.com/zos/rmsportal/OpROPHYqWmrMDBFMZtKF.svg" class="{{isExpand?\'code-expand-icon-show\':\'code-expand-icon-hide\'}}"></span></section><section class="highlight-wrapper {{isExpand?\'highlight-wrapper-expand\':\'\'}}">{{ code | raw}}</section></section>`\n});\n    if(false){ var render_moduleDefault, render_id, render_hotApi; }\n    \n// EXTERNAL MODULE: ./node_modules/lodash/difference.js\nvar difference = __webpack_require__(803);\n\n// EXTERNAL MODULE: ./src/table/index.js + 7 modules\nvar table = __webpack_require__(94);\n\n// EXTERNAL MODULE: ./src/tag/index.js + 1 modules\nvar tag = __webpack_require__(56);\n\n// CONCATENATED MODULE: ./node_modules/hulk-san-loader!./node_modules/hulk-markdown-loader/utils/pickFence.js?url=/Users/mayihui/code/santd/src/transfer/docs/table.md!./node_modules/hulk-markdown-loader/utils/_fakemd?mdurl=/Users/mayihui/code/santd/src/transfer/docs/table.md&_t=1576497827776\nconst mockTags = [\'cat\', \'dog\', \'bird\'];\nconst table_md_t_1576497827776_mockData = [];\n\nfor (let i = 0; i < 20; i++) {\n  table_md_t_1576497827776_mockData.push({\n    key: i.toString(),\n    title: `content${i + 1}`,\n    description: `description of content${i + 1}`,\n    disabled: i % 4 === 0,\n    tag: mockTags[i % 3]\n  });\n}\n\nconst originTargetKeys = table_md_t_1576497827776_mockData.filter(item => +item.key % 3 > 1).map(item => item.key);\nconst leftTableColumns = [{\n  dataIndex: \'title\',\n  title: \'Name\'\n}, {\n  dataIndex: \'tag\',\n  title: \'Tag\',\n  scopedSlots: {\n    render: \'tag\'\n  }\n}, {\n  dataIndex: \'description\',\n  title: \'Description\'\n}];\nconst rightTableColumns = [{\n  dataIndex: \'title\',\n  title: \'Name\'\n}];\n\n\n\n\n\n\nconst transferTable = san_spa_min_default.a.defineComponent({\n  components: {\n    \'s-table\': table["a" /* default */],\n    \'s-tag\': tag["a" /* default */]\n  },\n\n  initData() {\n    return {\n      rowSelection: {\n        selectedRowKeys: [],\n        handleSelect: this.handleSelectItem.bind(this),\n        handleSelectAll: this.handleSelectAll.bind(this),\n\n        getCheckboxProps(record) {\n          return {\n            disabled: record.disabled\n          };\n        }\n\n      }\n    };\n  },\n\n  inited() {\n    this.watch(\'selectedKeys\', val => {\n      this.data.set(\'rowSelection.selectedRowKeys\', val);\n    });\n    this.watch(\'disabled\', val => {\n      this.data.set(\'rowSelection.getCheckboxProps\', record => {\n        return {\n          disabled: val || record.disabled\n        };\n      });\n    });\n  },\n\n  computed: {\n    columns() {\n      const direction = this.data.get(\'direction\');\n      return direction === \'left\' ? leftTableColumns : rightTableColumns;\n    }\n\n  },\n\n  handleSelectAll(selectedRows, checked) {\n    const treeSelectedKeys = selectedRows.map(({\n      key\n    }) => key);\n    this.dispatch(\'santd_transfer_itemSelectAll\', {\n      selectedKeys: treeSelectedKeys,\n      checkAll: checked\n    });\n  },\n\n  handleSelectItem(record, checked) {\n    this.dispatch(\'santd_transfer_itemSelect\', {\n      selectedKey: record.key,\n      checked\n    });\n  },\n\n  template: `<div>\n        <s-table\n            columns="{{columns}}"\n            data="{{filteredItems}}"\n            size="small"\n            rowSelection="{{rowSelection}}"\n        >\n            <span slot="tag">\n                <s-tag>{{text}}</s-tag>\n            </span>\n        </s-table>\n    </div>`\n});\n/* harmony default export */ var table_md_t_1576497827776 = ({\n  initData() {\n    return {\n      disabled: false,\n      showSearch: false,\n      mockData: table_md_t_1576497827776_mockData,\n      targetKeys: originTargetKeys,\n      selectedKeys: [],\n\n      filterOption(inputValue, item) {\n        return item.title.indexOf(inputValue) !== -1 || item.tag.indexOf(inputValue) !== -1;\n      }\n\n    };\n  },\n\n  components: {\n    \'s-transfer\': transfer["a" /* default */],\n    \'s-switch\': src_switch["a" /* default */],\n    \'s-transfertable\': transferTable\n  },\n\n  handleChange({\n    targetKeys\n  }) {\n    this.data.set(\'targetKeys\', targetKeys);\n    this.data.set(\'selectedKeys\', []);\n  },\n\n  handleDisable(disable) {\n    this.data.set(\'disabled\', disable);\n  },\n\n  handleShowSearch(disable) {\n    this.data.set(\'showSearch\', disable);\n  },\n\n  template: `<div><s-transfer disabled="{{disabled}}" dataSource="{{mockData}}" sourceKeys="{{sourceKeys}}" targetKeys="{{targetKeys}}" showSelectAll="{{false}}" showSearch="{{showSearch}}" filterOption="{{filterOption}}" on-change="handleChange"><s-transfertable slot="leftRenderList" direction="{{direction}}" filteredItems="{{filteredItems}}" selectedKeys="{{selectedKeys}}" disabled="{{disabled}}"></s-transfertable><s-transfertable slot="rightRenderList" direction="{{direction}}" filteredItems="{{filteredItems}}" selectedKeys="{{selectedKeys}}" disabled="{{disabled}}"></s-transfertable></s-transfer><s-switch checkedChildren="disabled" unCheckedChildren="disabled" checked="{{disabled}}" on-change="handleDisable" style="margin-top: 16px"></s-switch><s-switch checkedChildren="showSearch" unCheckedChildren="showSearch" checked="{{showSearch}}" on-change="handleShowSearch" style="margin-top: 16px"></s-switch></div>`\n});\n// CONCATENATED MODULE: ./src/transfer/docs/table.md\n\n/* harmony default export */ var docs_table = ({\n  initData() {\n    return {\n      isExpand: false,\n      code: `\n<pre><code class="language-html">&lt;template>\n    &lt;div>\n        &lt;s-transfer\n            disabled="{{disabled}}"\n            dataSource="{{mockData}}"\n            sourceKeys="{{sourceKeys}}"\n            targetKeys="{{targetKeys}}"\n            showSelectAll="{{false}}"\n            showSearch="{{showSearch}}"\n            filterOption="{{filterOption}}"\n            on-change="handleChange"\n        >\n            &lt;s-transfertable\n                slot="leftRenderList"\n                direction="{{direction}}"\n                filteredItems="{{filteredItems}}"\n                selectedKeys="{{selectedKeys}}"\n                disabled="{{disabled}}"\n            >\n            &lt;/s-transfertable>\n            &lt;s-transfertable\n                slot="rightRenderList"\n                direction="{{direction}}"\n                filteredItems="{{filteredItems}}"\n                selectedKeys="{{selectedKeys}}"\n                disabled="{{disabled}}"\n            />\n        &lt;/s-transfer>\n        &lt;s-switch\n            checkedChildren="disabled"\n            unCheckedChildren="disabled"\n            checked="{{disabled}}"\n            on-change="handleDisable"\n            style="margin-top: 16px"\n        />\n        &lt;s-switch\n            checkedChildren="showSearch"\n            unCheckedChildren="showSearch"\n            checked="{{showSearch}}"\n            on-change="handleShowSearch"\n            style="margin-top: 16px"\n        />\n    &lt;/div>\n&lt;/template>\n&lt;script>\nconst mockTags = [\'cat\', \'dog\', \'bird\'];\nconst mockData = [];\nfor (let i = 0; i &lt; 20; i++) {\n    mockData.push({\n        key: i.toString(),\n        title: &#96;content&#36;&#123;i + 1}&#96;,\n        description: &#96;description of content&#36;&#123;i + 1}&#96;,\n        disabled: i % 4 === 0,\n        tag: mockTags[i % 3],\n    });\n}\n\nconst originTargetKeys = mockData.filter(item => +item.key % 3 > 1).map(item => item.key);\n\nconst leftTableColumns = [{\n    dataIndex: \'title\',\n    title: \'Name\',\n}, {\n    dataIndex: \'tag\',\n    title: \'Tag\',\n    scopedSlots: {render: \'tag\'}\n}, {\n    dataIndex: \'description\',\n    title: \'Description\',\n}];\n\nconst rightTableColumns = [{\n    dataIndex: \'title\',\n    title: \'Name\'\n}];\n\nimport san from \'san\';\nimport difference from \'lodash/difference\';\nimport transfer from \'santd/transfer\';\nimport Switch from \'santd/switch\';\nimport Table from \'santd/table\';\nimport Tag from \'santd/tag\';\n\nconst transferTable = san.defineComponent({\n    components: {\n        \'s-table\': Table,\n        \'s-tag\': Tag\n    },\n    initData() {\n        return {\n            rowSelection: {\n                selectedRowKeys: [],\n                handleSelect: this.handleSelectItem.bind(this),\n                handleSelectAll: this.handleSelectAll.bind(this),\n                getCheckboxProps(record) {\n                    return {\n                        disabled: record.disabled\n                    };\n                }\n            }\n        }\n    },\n    inited() {\n        this.watch(\'selectedKeys\', val => {\n            this.data.set(\'rowSelection.selectedRowKeys\', val);\n        });\n\n        this.watch(\'disabled\', val => {\n            this.data.set(\'rowSelection.getCheckboxProps\', (record) => { \n                return { \n                    disabled: val || record.disabled\n                }\n            })\n        })\n    },\n    computed: {\n        columns() {\n            const direction = this.data.get(\'direction\');\n            return direction === \'left\' ? leftTableColumns : rightTableColumns;\n        }\n    },\n    handleSelectAll(selectedRows, checked) {\n        const treeSelectedKeys = selectedRows.map(({key}) => key);\n\n        this.dispatch(\'santd_transfer_itemSelectAll\', {selectedKeys: treeSelectedKeys, checkAll: checked});\n    },\n    handleSelectItem(record, checked) {\n        this.dispatch(\'santd_transfer_itemSelect\', {selectedKey: record.key, checked});\n    },\n    template: &#96;&lt;div>\n        &lt;s-table\n            columns="{{columns}}"\n            data="{{filteredItems}}"\n            size="small"\n            rowSelection="{{rowSelection}}"\n        >\n            &lt;span slot="tag">\n                &lt;s-tag>{{text}}&lt;/s-tag>\n            &lt;/span>\n        &lt;/s-table>\n    &lt;/div>&#96;\n});\n\nexport default {\n    initData() {\n        return {\n            disabled: false,\n            showSearch: false,\n            mockData: mockData,\n            targetKeys: originTargetKeys,\n            selectedKeys: [],\n            filterOption(inputValue, item) {\n                return item.title.indexOf(inputValue) !== -1 || item.tag.indexOf(inputValue) !== -1\n            }\n        };\n    },\n    components: {\n        \'s-transfer\': transfer,\n        \'s-switch\': Switch,\n        \'s-transfertable\': transferTable\n    },\n    handleChange({targetKeys}) {\n        this.data.set(\'targetKeys\', targetKeys);\n        this.data.set(\'selectedKeys\', []);\n    },\n    handleDisable(disable) {\n        this.data.set(\'disabled\', disable);\n    },\n    handleShowSearch(disable) {\n        this.data.set(\'showSearch\', disable);\n    }\n}\n&lt;/script></code></pre>`,\n      text: `\n<h4 id="表格穿梭框">表格穿梭框</h4>\n<p>使用 Table 组件作为自定义渲染列表。</p>`\n    };\n  },\n\n  toggleExpand() {\n    this.data.set(\'isExpand\', !this.data.get(\'isExpand\'));\n  },\n\n  components: {\n    \'code-preview\': table_md_t_1576497827776\n  },\n  template: `<section class="code-box {{isExpand?\'expand\':\'\'}}" id="components-demo-1576497827776"><section class="code-box-demo"><code-preview></code-preview></section><section class="code-box-meta markdown">{{ text | raw}}<span class="code-expand-icon" on-click="toggleExpand"><img alt="expand code" src="https://gw.alipayobjects.com/zos/rmsportal/wSAkBuJFbdxsosKKpqyq.svg" class="{{isExpand?\'code-expand-icon-hide\':\'code-expand-icon-show\'}}"><img alt="expand code" src="https://gw.alipayobjects.com/zos/rmsportal/OpROPHYqWmrMDBFMZtKF.svg" class="{{isExpand?\'code-expand-icon-show\':\'code-expand-icon-hide\'}}"></span></section><section class="highlight-wrapper {{isExpand?\'highlight-wrapper-expand\':\'\'}}">{{ code | raw}}</section></section>`\n});\n    if(false){ var table_moduleDefault, table_id, table_hotApi; }\n    \n// EXTERNAL MODULE: ./src/tree/index.js + 3 modules\nvar tree = __webpack_require__(44);\n\n// CONCATENATED MODULE: ./node_modules/hulk-san-loader!./node_modules/hulk-markdown-loader/utils/pickFence.js?url=/Users/mayihui/code/santd/src/transfer/docs/tree.md!./node_modules/hulk-markdown-loader/utils/_fakemd?mdurl=/Users/mayihui/code/santd/src/transfer/docs/tree.md&_t=1576497827758\nconst treeData = [{\n  key: \'0-0\',\n  title: \'0-0\'\n}, {\n  key: \'0-1\',\n  title: \'0-1\',\n  children: [{\n    key: \'0-1-0\',\n    title: \'0-1-0\'\n  }, {\n    key: \'0-1-1\',\n    title: \'0-1-1\'\n  }]\n}, {\n  key: \'0-2\',\n  title: \'0-3\'\n}];\nconst transferDataSource = [];\n\nfunction flatten(list = []) {\n  list.forEach(item => {\n    transferDataSource.push(item);\n    flatten(item.children);\n  });\n}\n\nflatten(treeData);\n\n\n\n\nconst isChecked = (selectedKeys, eventKey) => {\n  return selectedKeys.indexOf(eventKey) !== -1;\n};\n\nconst transferTree = san_spa_min_default.a.defineComponent({\n  components: {\n    \'s-tree\': tree["a" /* default */],\n    \'s-treenode\': tree["a" /* default */].TreeNode\n  },\n  computed: {\n    checkedKeys() {\n      const selectedKeys = this.data.get(\'selectedKeys\');\n      const targetKeys = this.data.get(\'targetKeys\');\n      return [...selectedKeys, ...targetKeys];\n    }\n\n  },\n\n  handleCheck({\n    info\n  }) {\n    const selectedKey = info.node.data.get(\'key\');\n    const checkedKeys = this.data.get(\'checkedKeys\');\n    this.dispatch(\'santd_transfer_itemSelect\', {\n      selectedKey,\n      checked: !isChecked(checkedKeys, selectedKey)\n    });\n  },\n\n  handleSelect({\n    info\n  }) {\n    const selectedKey = info.node.data.get(\'key\');\n    const checkedKeys = this.data.get(\'checkedKeys\');\n    this.dispatch(\'santd_transfer_itemSelect\', {\n      selectedKey,\n      checked: !isChecked(checkedKeys, selectedKey)\n    });\n  },\n\n  isDisabled(checkedKeys, key) {\n    return checkedKeys.includes(key);\n  },\n\n  template: `<div>\n        <s-tree\n            blockNode\n            checkable\n            defaultExpandAll\n            checkedKeys="{{checkedKeys}}"\n            on-check="handleCheck"\n            on-select="handleSelect"\n        >\n            <s-treenode key="0-0" title="0-0" disabled="{{isDisabled(targetKeys, \'0-0\')}}"></s-treenode>\n            <s-treenode key="0-1" title="0-1" disabled="{{isDisabled(targetKeys, \'0-1\')}}">\n                <s-treenode key="0-1-0" title="0-1-0" disabled="{{isDisabled(targetKeys, \'0-1-0\')}}"></s-treenode>\n                <s-treenode key="0-1-1" title="0-1-1" disabled="{{isDisabled(targetKeys, \'0-1-1\')}}"></s-treenode>\n            </s-treenode>\n            <s-treenode key="0-2" title="0-3" disabled="{{isDisabled(targetKeys, \'0-2\')}}"></s-treenode>\n        </s-tree>\n    </div>`\n});\n/* harmony default export */ var tree_md_t_1576497827758 = ({\n  initData() {\n    return {\n      disabled: false,\n      showSearch: false,\n      mockData: transferDataSource,\n      targetKeys: []\n    };\n  },\n\n  components: {\n    \'s-transfer\': transfer["a" /* default */],\n    \'s-transfertree\': transferTree\n  },\n\n  handleChange({\n    targetKeys\n  }) {\n    this.data.set(\'targetKeys\', targetKeys);\n  },\n\n  template: `<div><s-transfer disabled="{{disabled}}" dataSource="{{mockData}}" targetKeys="{{targetKeys}}" showSelectAll="{{false}}" on-change="handleChange"><s-transfertree slot="leftRenderList" selectedKeys="{{selectedKeys}}" targetKeys="{{targetKeys}}"></s-transfertree></s-transfer></div>`\n});\n// CONCATENATED MODULE: ./src/transfer/docs/tree.md\n\n/* harmony default export */ var docs_tree = ({\n  initData() {\n    return {\n      isExpand: false,\n      code: `\n<pre><code class="language-html">&lt;template>\n    &lt;div>\n        &lt;s-transfer\n            disabled="{{disabled}}"\n            dataSource="{{mockData}}"\n            targetKeys="{{targetKeys}}"\n            showSelectAll="{{false}}"\n            on-change="handleChange"\n        >\n            &lt;s-transfertree slot="leftRenderList"\n                selectedKeys="{{selectedKeys}}"\n                targetKeys="{{targetKeys}}"\n            />\n        &lt;/s-transfer>\n    &lt;/div>\n&lt;/template>\n&lt;script>\n\nconst treeData = [{\n    key: \'0-0\', title: \'0-0\'\n}, {\n    key: \'0-1\',\n    title: \'0-1\',\n    children: [{\n        key: \'0-1-0\', title: \'0-1-0\'\n    }, {\n        key: \'0-1-1\', title: \'0-1-1\'\n    }]\n}, {\n    key: \'0-2\', title: \'0-3\'\n}];\n\nconst transferDataSource = [];\nfunction flatten(list = []) {\n    list.forEach(item => {\n        transferDataSource.push(item);\n        flatten(item.children);\n    });\n}\nflatten(treeData);\n\nimport san from \'san\';\nimport transfer from \'santd/transfer\';\nimport Tree from \'santd/tree\';\n\nconst isChecked = (selectedKeys, eventKey) => {\n    return selectedKeys.indexOf(eventKey) !== -1;\n};\n\nconst transferTree = san.defineComponent({\n    components: {\n        \'s-tree\': Tree,\n        \'s-treenode\': Tree.TreeNode\n    },\n    computed: {\n        checkedKeys() {\n            const selectedKeys = this.data.get(\'selectedKeys\');\n            const targetKeys = this.data.get(\'targetKeys\');\n            return [...selectedKeys, ...targetKeys];\n        }\n    },\n    handleCheck({info}) {\n        const selectedKey = info.node.data.get(\'key\');\n        const checkedKeys = this.data.get(\'checkedKeys\');\n        this.dispatch(\'santd_transfer_itemSelect\', {selectedKey, checked: !isChecked(checkedKeys, selectedKey)});\n    },\n    handleSelect({info}) {\n        const selectedKey = info.node.data.get(\'key\');\n        const checkedKeys = this.data.get(\'checkedKeys\');\n        this.dispatch(\'santd_transfer_itemSelect\', {selectedKey, checked: !isChecked(checkedKeys, selectedKey)});\n    },\n    isDisabled(checkedKeys, key) {\n        return checkedKeys.includes(key);\n    },\n    template: &#96;&lt;div>\n        &lt;s-tree\n            blockNode\n            checkable\n            defaultExpandAll\n            checkedKeys="{{checkedKeys}}"\n            on-check="handleCheck"\n            on-select="handleSelect"\n        >\n            &lt;s-treenode key="0-0" title="0-0" disabled="{{isDisabled(targetKeys, \'0-0\')}}">&lt;/s-treenode>\n            &lt;s-treenode key="0-1" title="0-1" disabled="{{isDisabled(targetKeys, \'0-1\')}}">\n                &lt;s-treenode key="0-1-0" title="0-1-0" disabled="{{isDisabled(targetKeys, \'0-1-0\')}}">&lt;/s-treenode>\n                &lt;s-treenode key="0-1-1" title="0-1-1" disabled="{{isDisabled(targetKeys, \'0-1-1\')}}">&lt;/s-treenode>\n            &lt;/s-treenode>\n            &lt;s-treenode key="0-2" title="0-3" disabled="{{isDisabled(targetKeys, \'0-2\')}}">&lt;/s-treenode>\n        &lt;/s-tree>\n    &lt;/div>&#96;\n});\n\nexport default {\n    initData() {\n        return {\n            disabled: false,\n            showSearch: false,\n            mockData: transferDataSource,\n            targetKeys: []\n        };\n    },\n    components: {\n        \'s-transfer\': transfer,\n        \'s-transfertree\': transferTree\n    },\n    handleChange({targetKeys}) {\n        this.data.set(\'targetKeys\', targetKeys);\n    }\n}\n&lt;/script></code></pre>`,\n      text: `\n<h4 id="树穿梭框">树穿梭框</h4>\n<p>使用 Tree 组件作为自定义渲染列表。</p>`\n    };\n  },\n\n  toggleExpand() {\n    this.data.set(\'isExpand\', !this.data.get(\'isExpand\'));\n  },\n\n  components: {\n    \'code-preview\': tree_md_t_1576497827758\n  },\n  template: `<section class="code-box {{isExpand?\'expand\':\'\'}}" id="components-demo-1576497827758"><section class="code-box-demo"><code-preview></code-preview></section><section class="code-box-meta markdown">{{ text | raw}}<span class="code-expand-icon" on-click="toggleExpand"><img alt="expand code" src="https://gw.alipayobjects.com/zos/rmsportal/wSAkBuJFbdxsosKKpqyq.svg" class="{{isExpand?\'code-expand-icon-hide\':\'code-expand-icon-show\'}}"><img alt="expand code" src="https://gw.alipayobjects.com/zos/rmsportal/OpROPHYqWmrMDBFMZtKF.svg" class="{{isExpand?\'code-expand-icon-show\':\'code-expand-icon-hide\'}}"></span></section><section class="highlight-wrapper {{isExpand?\'highlight-wrapper-expand\':\'\'}}">{{ code | raw}}</section></section>`\n});\n    if(false){ var tree_moduleDefault, tree_id, tree_hotApi; }\n    \n// CONCATENATED MODULE: ./src/transfer/docs/head.md\n/* harmony default export */ var head = ({\n  template: `<section class="markdown"><h1 id="transfer-穿梭框">Transfer 穿梭框</h1><p>双栏穿梭选择框。</p><h2 id="何时使用">何时使用</h2><ul><li>需要在多个可选项中进行多选时。</li><li>比起 Select 和 TreeSelect，穿梭框占据更大的空间，可以展示可选项的更多信息。</li></ul><p>穿梭选择框用直观的方式在两栏中移动元素，完成选择行为。</p><p>选择一个或以上的选项后，点击对应的方向键，可以把选中的选项移动到另一栏。其中，左边一栏为 <code>source</code>，右边一栏为 <code>target</code>，API 的设计也反映了这两个概念。</p><h2 id="代码演示">代码演示</h2></section>`\n});\n    if(false){ var head_moduleDefault, head_id, head_hotApi; }\n    \n// CONCATENATED MODULE: ./src/transfer/docs/index.js\n/**\n * @file Santd transfer docs file\n **/\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var docs = __webpack_exports__["default"] = (san_spa_min_default.a.defineComponent({\n  components: {\n    readme: README,\n    basic: basic,\n    search: search,\n    advance: advance,\n    render: render,\n    table: docs_table,\n    tree: docs_tree,\n    head: head\n  },\n  template: "\\n        <div>\\n            <head/>\\n            <basic/>\\n            <search/>\\n            <advance/>\\n            <render/>\\n            <table/>\\n            <tree/>\\n            <readme/>\\n        </div>\\n    "\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///566\n')},803:function(module,exports,__webpack_require__){eval("var baseDifference = __webpack_require__(301),\n    baseFlatten = __webpack_require__(804),\n    baseRest = __webpack_require__(302),\n    isArrayLikeObject = __webpack_require__(303);\n\n/**\n * Creates an array of `array` values not included in the other given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order and references of result values are\n * determined by the first array.\n *\n * **Note:** Unlike `_.pullAll`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.without, _.xor\n * @example\n *\n * _.difference([2, 1], [2, 3]);\n * // => [1]\n */\nvar difference = baseRest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n    : [];\n});\n\nmodule.exports = difference;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODAzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kaWZmZXJlbmNlLmpzP2NlYWMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VEaWZmZXJlbmNlID0gcmVxdWlyZSgnLi9fYmFzZURpZmZlcmVuY2UnKSxcbiAgICBiYXNlRmxhdHRlbiA9IHJlcXVpcmUoJy4vX2Jhc2VGbGF0dGVuJyksXG4gICAgYmFzZVJlc3QgPSByZXF1aXJlKCcuL19iYXNlUmVzdCcpLFxuICAgIGlzQXJyYXlMaWtlT2JqZWN0ID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZU9iamVjdCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgYGFycmF5YCB2YWx1ZXMgbm90IGluY2x1ZGVkIGluIHRoZSBvdGhlciBnaXZlbiBhcnJheXNcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gKlxuICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICogQHNlZSBfLndpdGhvdXQsIF8ueG9yXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGlmZmVyZW5jZShbMiwgMV0sIFsyLCAzXSk7XG4gKiAvLyA9PiBbMV1cbiAqL1xudmFyIGRpZmZlcmVuY2UgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSlcbiAgICA6IFtdO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGlmZmVyZW5jZTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///803\n")},804:function(module,exports,__webpack_require__){eval("var arrayPush = __webpack_require__(304),\n    isFlattenable = __webpack_require__(805);\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODA0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZsYXR0ZW4uanM/NWM2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgaXNGbGF0dGVuYWJsZSA9IHJlcXVpcmUoJy4vX2lzRmxhdHRlbmFibGUnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nIGZsYXR0ZW5pbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IHRvIHZhbHVlcyB0aGF0IHBhc3MgYHByZWRpY2F0ZWAgY2hlY2tzLlxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpO1xuICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZsYXR0ZW47XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///804\n")},805:function(module,exports,__webpack_require__){eval("var Symbol = __webpack_require__(59),\n    isArguments = __webpack_require__(73),\n    isArray = __webpack_require__(24);\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODA1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNGbGF0dGVuYWJsZS5qcz8wNjIxIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmxhdHRlbmFibGUgYGFyZ3VtZW50c2Agb2JqZWN0IG9yIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZsYXR0ZW5hYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzRmxhdHRlbmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSB8fFxuICAgICEhKHNwcmVhZGFibGVTeW1ib2wgJiYgdmFsdWUgJiYgdmFsdWVbc3ByZWFkYWJsZVN5bWJvbF0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRmxhdHRlbmFibGU7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///805\n")}}]);